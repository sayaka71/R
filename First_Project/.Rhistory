panel.first = lines(stats::lowess(Speed, Distance), lty = "dashed"),
pch = 0, cex = 1.2, col = "blue")
## Show the different plot types
x <- 0:12
y <- sin(pi/5 * x)
op <- par(mfrow = c(3,3), mar = .1+ c(2,2,3,1))
for (tp in c("p","l","b",  "c","o","h",  "s","S","n")) {
plot(y ~ x, type = tp, main = paste0("plot(*, type = \"", tp, "\")"))
if(tp == "S") {
lines(x, y, type = "s", col = "red", lty = 2)
mtext("lines(*, type = \"s\", ...)", col = "red", cex = 0.8)
}
}
par(op)
##--- Log-Log Plot  with  custom axes
lx <- seq(1, 5, length = 41)
yl <- expression(e^{-frac(1,2) * {log[10](x)}^2})
y <- exp(-.5*lx^2)
op <- par(mfrow = c(2,1), mar = par("mar")-c(1,0,2,0), mgp = c(2, .7, 0))
plot(10^lx, y, log = "xy", type = "l", col = "purple",
main = "Log-Log plot", ylab = yl, xlab = "x")
plot(10^lx, y, log = "xy", type = "o", pch = ".", col = "forestgreen",
main = "Log-Log plot with custom axes", ylab = yl, xlab = "x",
axes = FALSE, frame.plot = TRUE)
my.at <- 10^(1:5)
axis(1, at = my.at, labels = formatC(my.at, format = "fg"))
e.y <- -5:-1 ; at.y <- 10^e.y
axis(2, at = at.y, col.axis = "red", las = 1,
labels = as.expression(lapply(e.y, function(E) bquote(10^.(E)))))
par(op)
# ex). cars
Speed <- cars$speed
Distance <- cars$dist
plot(Speed, Distance, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue")
plot(Speed, Distance,
panel.first = lines(stats::lowess(Speed, Distance), lty = "dashed"),
pch = 0, cex = 1.2, col = "blue")
# --< data = cars >--
head(cars)
summary(cars)
# ggplot() + geom_point(data = cars, aes(speed, dist))
# ggplot()で図を作成，geom_point()で散布図
# geom_smoothで線形回帰，95%信頼区間
figure.1 <- ggplot(data = cars, aes(speed, dist)) + geom_point(size = 2,color = "red") + geom_smooth(method = "lm") + ggtitle("Cars Data") + labs(x = "Speed [km/h]", y = "Stopping Dist [km]")
figure.1 <- ggplotly(figure.1)
figure.1
plot(cars$speed, car$dist, xlab = "Speed [km/h]", ylab = "Stopping Dist [km]", title = "Cars Data")
plot(cars$speed, cars$dist, xlab = "Speed [km/h]", ylab = "Stopping Dist [km]", title = "Cars Data")
plot(cars$speed, cars$dist, xlab = "Speed [km/h]", ylab = "Stopping Dist [km]", title = "Cars Data")
help("plot")
plot(x = cars$speed, y = cars$dist,type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]", title = "Cars Data")
plot(x = cars$speed, y = cars$dist,type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
warnings()
plot(x = cars$speed, y = cars$dist,type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
plot(x = cars$speed, y = cars$dist,type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result)
abline(lm.result, col = "red")
title("cars data")
# --< data = cars >--
head(cars)
summary(cars)
# normal plot
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title("cars data")
# ggplot() + geom_point(data = cars, aes(speed, dist))
# ggplot()で図を作成，geom_point()で散布図
# geom_smoothで線形回帰，95%信頼区間
figure.1 <- ggplot(data = cars, aes(speed, dist)) + geom_point(size = 2,color = "red") + geom_smooth(method = "lm") + ggtitle("Cars Data") + labs(x = "Speed [km/h]", y = "Stopping Dist [km]")
figure.1 <- ggplotly(figure.1)
figure.1
# ggplot() + geom_point(data = cars, aes(speed, dist))
# ggplot()で図を作成，geom_point()で散布図
# geom_smoothで線形回帰，95%信頼区間
figure.1 <- ggplot(data = cars, aes(speed, dist)) + geom_point(size = 2,color = "red") + geom_smooth(method = "lm") + title("Cars Data") + labs(x = "Speed [km/h]", y = "Stopping Dist [km]")
figure.1 <- ggplotly(figure.1)
figure.1
# ggplot() + geom_point(data = cars, aes(speed, dist))
# ggplot()で図を作成，geom_point()で散布図
# geom_smoothで線形回帰，95%信頼区間
figure.1 <- ggplot(data = cars, aes(speed, dist)) + geom_point(size = 2,color = "red") + geom_smooth(method = "lm") + ggtitle("Cars Data") + labs(x = "Speed [km/h]", y = "Stopping Dist [km]")
figure.1 <- ggplotly(figure.1)
figure.1
# normal plot
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title("cars data")
lm.result
# normal plot
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title(lm.result)
title(lm.result$coefficients)
# normal plot
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title(lm.result$coefficients)
lm.result$call
lm.result$terms
lm.result$model
summary(lm.result)
# --< data = cars >--
head(cars)
summary(cars)
# normal plot
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title("cars data")
summary(lm.result)
# ggplot() + geom_point(data = cars, aes(speed, dist))
# ggplot()で図を作成，geom_point()で散布図
# geom_smoothで線形回帰，95%信頼区間
figure.1 <- ggplot(data = cars, aes(speed, dist)) + geom_point(size = 2,color = "red") + geom_smooth(method = "lm") + ggtitle("Cars Data") + labs(x = "Speed [km/h]", y = "Stopping Dist [km]")
figure.1 <- ggplotly(figure.1)
figure.1
# normal plot
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title("cars data")
# --< data = diamonds >--
head(diamonds)
summary(diamonds)
# hexbin (geom_hex), scale_fill_gradient()でグラデーション
figure.2 <- ggplot(diamonds, aes(carat, price)) + geom_hex() + labs(title = "Diamond") + scale_fill_gradient(low = "lightblue1",
high = "darkblue",
trans = "log10")
figure.2 <- ggplotly(figure.2)
figure.2
# --< data = Orange >--
head(Orange)
summary(Orange)
# 成長日記グラフ
figure.3 <- ggplot(Orange, aes(x = age, y = circumference, colour = Tree)) + geom_line() +  scale_color_brewer(palette = "Set1") + labs(x = "age (樹齢)", y = "circumference (周囲長)", title = "Orange Tree")
figure.3 <- ggplotly(figure.3)
figure.3
mtcars
# --< data = mtcars >--
head(mtcars)
summary(mtcars)
help(mtcars)
heatmap(as.matrix(mtcars), col=bluered(256))
heatmap(as.matrix(mtcars))
heatmap(as.matrix(mtcars), col = redgreen(50))
install.packages("gplots")
library(gplots)
heatmap(as.matrix(mtcars), col = redgreen(50))
heatmap(as.matrix(mtcars), col = coolwarm(50))
heatmap(as.matrix(mtcars), col = cyan(50))
heatmap(as.matrix(mtcars), col = OrRd)
heatmap(as.matrix(mtcars), col = OrRd(40))
heatmap(as.matrix(mtcars), col = brewer.pal(11, "RdBu"))
install.packages("RColorBrewer")
library(RColorBrewer)
heatmap(as.matrix(mtcars), col = brewer.pal(11, "RdBu"))
heatmap(as.matrix(mtcars), col = brewer.pal(20, "Spectal"))
heatmap(as.matrix(mtcars), col = brewer.pal(20, "Spectral"))
heatmap(as.matrix(mtcars), col = brewer.pal(11, "Spectral"))
heatmap(as.matrix(mtcars), col = brewer.pal(11, "Reds"))
heatmap(as.matrix(mtcars), col = brewer.pal(9, "Reds"))
heatmap.2(as.matrix(mtcars))
library(gplots)
heatmap.2(as.matrix(mtcars))
# normal plot 線形回帰
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title("cars data")
summary(lm.result)
# ggplot() + geom_point(data = cars, aes(speed, dist))
# ggplot()で図を作成，geom_point()で散布図
# geom_smoothで線形回帰，95%信頼区間
figure.1 <- ggplot(data = cars, aes(speed, dist)) + geom_point(size = 2,color = "red") + geom_smooth(method = "lm") + ggtitle("Cars Data") + labs(x = "Speed [km/h]", y = "Stopping Dist [km]")
figure.1 <- ggplotly(figure.1)
figure.1
# --< data = diamonds >--
head(diamonds)
summary(diamonds)
# hexbin (geom_hex), scale_fill_gradient()でグラデーション
figure.2 <- ggplot(diamonds, aes(carat, price)) + geom_hex() + labs(title = "Diamond") + scale_fill_gradient(low = "lightblue1",
high = "darkblue",
trans = "log10")
figure.2 <- ggplotly(figure.2)
figure.2
# --< data = Orange >--
head(Orange)
summary(Orange)
# 成長日記グラフ
figure.3 <- ggplot(Orange, aes(x = age, y = circumference, colour = Tree)) + geom_line() +  scale_color_brewer(palette = "Set1") + labs(x = "age (樹齢)", y = "circumference (周囲長)", title = "Orange Tree")
figure.3 <- ggplotly(figure.3)
figure.3
# --< data = mtcars >--
head(mtcars)
summary(mtcars)
heatmap.2(as.matrix(mtcars))
install.packages("sf")
# install packages
library(sf)
p1 <- st_point(c(140.112, 36.083))
p1
p1 %>%
st_geometry_type()
install.packages("mapview")
library(mapview)
st
mapview(p1)
install.packages("rnaturalearth")
library(rnaturalearth)
library(rnaturalearth)
st_sfc(p1, crs = 4326)
mapview()
mapview(p1)
mapview()
ne_jpn <-
ne_states(country = "Japan", returnclass = "sf") %>%
tibble::new_tibble(subclass = "sf")
install.packages("rnaturalearthhires", repos = "http://packages.ropensci.org", type = "source")
ne_jpn <-
ne_states(country = "Japan", returnclass = "sf") %>%
tibble::new_tibble(subclass = "sf")
install.packages("rnaturalearthhires")
library(rnaturalearthhires)
library(rnaturalearthhires)
ne_jpn <-
ne_states(country = "Japan", returnclass = "sf") %>%
tibble::new_tibble(subclass = "sf")
library(units)
install.packages("units")
library(units)
library(units)
library(units)
data("stations", package = "jmastats")
install.packages("remote")
install.packages("remotes")
library(remotes)
library(remotes)
remotes::install_git("https://gitlab.com/uribo/jmastats")
# remotes::install_git("https://gitlab.com/uribo/jmastats")
library(jmastats)
library(tidyverse)
library(tidyverse)
# remotes::install_git("https://gitlab.com/uribo/jmastats")
library(jmastats)
library(tidyverse)
data("stations", package = "jmastats")
stations
library(dplyr)
library(dplyr)
install.packages("patchwork")
library(patchwork)
install.packages("jpndistrict")
library(jpndistrict)
sf_pref33 <- jpn_pref(33, district = TRUE)
sf_pref33
df_h17_27_pops <- readr::read_rds(here::here("data-raw", "population_h17-h22.rds"))
install.packages("here")
library(here)
df_h17_27_pops <- readr::read_rds(here::here("data-raw", "population_h17-h22.rds"))
library(here)
df_h17to27_pops <-
readr::read_rds(here::here("data-raw", "population_h17-h22.rds"))
df_h17to27_pops <-
readr::read_rds(here::here("data-raw", "population_h17-h22.rds"))
setwd()
glimpse(sf_pref33)
# base
plot(sf_pref33)
plot(jpn_pref(28, district = TRUE))
sf_pref28 <- jpn_pref(28, district = TRUE)
glimpse(sf_pref28)
# base
plot(sf_pref28)
sf_pref28
st_geometry()
sf_pref28[,  "city"]
plot()
plot(sf_pref28[,  "city"])
geom_sf()
library(ggplot2)
# ggplot
library(ggplot2)
ggplot() +
geom_sf(data = sf_pref28, aes(fill = city_code)) +
coord_sf(datum = NA) +
guides(fill = TRUE) +
theme_void()
ggplot() +
geom_sf(data = sf_pref28, aes(fill = city_code)) +
coord_sf(datum = NA) +
guides(fill = FALSE) +
theme_void()
ggplot() +
geom_sf(data = sf_pref28, aes(fill = city_code)) +
coord_sf(datum = NA) +
theme_void()
ggplot() +
geom_sf(data = sf_pref28, aes(fill = city_code)) +
theme_void()
ggplot() +
geom_sf(data = sf_pref28, aes(fill = city_name)) +
theme_void()
sf_pref28
View(sf_pref28)
ggplot() +
geom_sf(data = sf_pref28, aes(fill = city)) +
theme_void()
par(family = "IPAexGothic",
oma = c(3, 3, 3, 6.5),
mar = c(2, 1, 1, 2))
sf_pref33[, "city"]
par(family = "IPAexGothic",
oma = c(3, 3, 3, 6.5),
mar = c(2, 1, 1, 2))
ggplot() +
geom_sf(data = sf_pref28, aes(fill = city)) +
theme_void()
par(family = "IPAexGothic",
oma = c(3, 3, 3, 6.5),
mar = c(2, 1, 1, 2))
sf_pref28[, "city"]
# ggplot
library(ggplot2)
par(family = "IPAexGothic",
oma = c(3, 3, 3, 6.5),
mar = c(2, 1, 1, 2))
sf_pref28[, "city"]
ggplot() +
geom_sf(data = sf_pref28, aes(fill = city)) +
theme_void()
# --< install packages >
# tools → install: "ggplot2", "plotly", "hexbin"
# library(ggplot2)で使えるようにする！！
library(ggplot2)
library(plotly)
library(hexbin)
library(gplots)
library(RColorBrewer)
# --< data = cars >--
head(cars)
summary(cars)
# normal plot 線形回帰
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title("cars data")
summary(lm.result)
# ggplot() + geom_point(data = cars, aes(speed, dist))
# ggplot()で図を作成，geom_point()で散布図
# geom_smoothで線形回帰，95%信頼区間
figure.1 <- ggplot(data = cars, aes(speed, dist)) + geom_point(size = 2,color = "red") + geom_smooth(method = "lm") + ggtitle("Cars Data") + labs(x = "Speed [km/h]", y = "Stopping Dist [km]")
figure.1 <- ggplotly(figure.1)
figure.1
# normal plot 線形回帰
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title("cars data")
summary(lm.result)
# normal plot 線形回帰
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title("cars data")
# normal plot 線形回帰
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title("cars data")
summary(lm.result)
# --< data = cars >--
head(cars)
summary(cars)
# normal plot 線形回帰
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title("cars data")
summary(lm.result)
# ggplot() + geom_point(data = cars, aes(speed, dist))
# ggplot()で図を作成，geom_point()で散布図
# geom_smoothで線形回帰，95%信頼区間
figure.1 <- ggplot(data = cars, aes(speed, dist)) + geom_point(size = 2,color = "red") + geom_smooth(method = "lm") + ggtitle("Cars Data") + labs(x = "Speed [km/h]", y = "Stopping Dist [km]")
figure.1 <- ggplotly(figure.1)
figure.1
# --< data = diamonds >--
head(diamonds)
summary(diamonds)
# hexbin (geom_hex), scale_fill_gradient()でグラデーション
figure.2 <- ggplot(diamonds, aes(carat, price)) + geom_hex() + labs(title = "Diamond") + scale_fill_gradient(low = "lightblue1",
high = "darkblue",
trans = "log10")
figure.2 <- ggplotly(figure.2)
figure.2
# --< data = Orange >--
head(Orange)
summary(Orange)
# 成長日記グラフ
figure.3 <- ggplot(Orange, aes(x = age, y = circumference, colour = Tree)) + geom_line() +  scale_color_brewer(palette = "Set1") + labs(x = "age (樹齢)", y = "circumference (周囲長)", title = "Orange Tree")
figure.3 <- ggplotly(figure.3)
figure.3
# --< data = mtcars >--
head(mtcars)
summary(mtcars)
heatmap.2(as.matrix(mtcars))
quit()
# --< data = cars >--
head(cars)
summary(cars)
# normal plot 線形回帰
plot(dist ~ speed,data = cars, type = "p", xlab = "Speed [km/h]", ylab = "Stopping Dist [km]")
lm.result <- lm(dist ~ speed, data = cars)
abline(lm.result, col = "red")
title("cars data")
summary(lm.result)
# ggplot() + geom_point(data = cars, aes(speed, dist))
# ggplot()で図を作成，geom_point()で散布図
# geom_smoothで線形回帰，95%信頼区間
figure.1 <- ggplot(data = cars, aes(speed, dist)) + geom_point(size = 2,color = "red") + geom_smooth(method = "lm") + ggtitle("Cars Data") + labs(x = "Speed [km/h]", y = "Stopping Dist [km]")
figure.1 <- ggplotly(figure.1)
figure.1
# ggplot() + geom_point(data = cars, aes(speed, dist))
# ggplot()で図を作成，geom_point()で散布図
# geom_smoothで線形回帰，95%信頼区間
figure.1 <- ggplot(data = cars, aes(speed, dist)) + geom_point(size = 2,color = "red") + geom_smooth(method = "lm") + ggtitle("Cars Data") + labs(x = "Speed [km/h]", y = "Stopping Dist [km]")
# --< install packages >
# tools → install: "ggplot2", "plotly", "hexbin"
# library(ggplot2)で使えるようにする！！
library(ggplot2)
library(plotly)
library(hexbin)
library(gplots)
library(RColorBrewer)
# ggplot() + geom_point(data = cars, aes(speed, dist))
# ggplot()で図を作成，geom_point()で散布図
# geom_smoothで線形回帰，95%信頼区間
figure.1 <- ggplot(data = cars, aes(speed, dist)) + geom_point(size = 2,color = "red") + geom_smooth(method = "lm") + ggtitle("Cars Data") + labs(x = "Speed [km/h]", y = "Stopping Dist [km]")
figure.1 <- ggplotly(figure.1)
figure.1
# --< data = diamonds >--
head(diamonds)
summary(diamonds)
# hexbin (geom_hex), scale_fill_gradient()でグラデーション
figure.2 <- ggplot(diamonds, aes(carat, price)) + geom_hex() + labs(title = "Diamond") + scale_fill_gradient(low = "lightblue1",
high = "darkblue",
trans = "log10")
figure.2 <- ggplotly(figure.2)
figure.2
# --< data = Orange >--
head(Orange)
summary(Orange)
# 成長日記グラフ
figure.3 <- ggplot(Orange, aes(x = age, y = circumference, colour = Tree)) + geom_line() +  scale_color_brewer(palette = "Set1") + labs(x = "age (樹齢)", y = "circumference (周囲長)", title = "Orange Tree")
figure.3 <- ggplotly(figure.3)
figure.3
# --< data = mtcars >--
head(mtcars)
summary(mtcars)
heatmap.2(as.matrix(mtcars))
# install packages
library(sf)
library(mapview)
library(rnaturalearth)
library(units)
library(remotes)
# remotes::install_git("https://gitlab.com/uribo/jmastats")
library(jmastats)
library(dplyr)
library(patchwork)
# 兵庫県の行政区域データを用意．
# 統計データとして，平成17, 22, 27年の国勢調査の人口データを使用（e-statからダウンロード可能）
library(jpndistrict)
library(here)
sf_pref28 <- jpn_pref(28, district = TRUE)
df_h17to27_pops <- readr::read_rds(here::here("data-raw", "population_h17-h22.rds"))
glimpse(sf_pref28)
# base
plot(sf_pref28)
plot(sf_pref28[,  "city"])
# ggplot
library(ggplot2)
sf_pref28[, "city"]
ggplot() +
geom_sf(data = sf_pref28, aes(fill = city)) +
theme_void()
quit()
df <- read.csv("csv/IMG_6046.csv")
summary(df)
#ggplot----
#ダサくなる
ggplot(data=df, aes(x=Circularity)) + geom_histogram(aes(y=..density..))
#ggplot----
#ダサくなる
library(ggplot2)
ggplot(data=df, aes(x=Circularity)) + geom_histogram(aes(y=..density..))
ggplot(data = df, aes(x=Circularity, y=Aspect_Ratio)) + geom_density2d()
ggplot(data = df, aes(x=Circularity, y=Area)) + geom_density2d()
ggplot(data = df, aes(x=Circularity, y=Perimeter)) + geom_density2d()
ggplot(data = df, aes(x=Circularity, y=Perimeters)) + geom_density2d()
df["Perimeters"]
df[aes(82,83)]
df[82]
df[82,:]
df[82,1]
df[82,1:7]
df[83,1:7]
