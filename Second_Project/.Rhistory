summary(df_B_Site.glm)
point <- 0
for (i in 1:30){
if (result_Site$real[i] == result_Site$pred_round[i]){
point <- point + 1
}
else {
point <- point + 0
}
}
point/30
# pairplot : linear fit
library(psych)
pairs.panels(df_B[, c(2:11)], lm = TRUE, hist.col = "green")
# 線形回帰lm
# Site
df_B_Site.lm<-lm(Site~.,data=df_B[, c(2:8,11)])
qqnorm(resid(df_B_Site.lm), pch="o", col="red")
qqline(resid(df_B_Site.lm))
# Elev
df_B_Elev.lm<-lm(Elev~.,data=df_B[, c(2:9)])
qqnorm(resid(df_B_Elev.lm), pch="o", col="red")
qqline(resid(df_B_Elev.lm))
# Ang
df_B_Ang.lm<-lm(Ang~.,data=df_B[, c(2:8,10)])
qqnorm(resid(df_B_Ang.lm), pch="o", col="red")
qqline(resid(df_B_Ang.lm))
# AIC
AIC(df_B_Site.lm)
AIC(df_B_Elev.lm)
AIC(df_B_Ang.lm)
#image_analysis 研究データ処理----
# import dataset
df_B <- read.csv("Weibull_B_Shape.csv")
names(df_B) <- c("Sample", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
# 4~8 mm name: df_B_4_8
nm_4_8 <- c(6047, 6051, 6055, 6058, 6061, 6064, 6068, 6073, 6077, 6081, 6085)
for (i in 1:11){
df_B_4_8[i,] <- df_B[df_B$Sample == nm_4_8[i],]
}
df_B_4_8
summary(df_B_4_8)
df_B_4_8$Sample <- c(1:11)
df_B_4_8
# plot
library(ggplot2)
ggplot(data = df_B_4_8, aes(x=Area, y=Circulality, colour=name)) + geom_point(size=8, alpha=0.4)
# except name
dat <- df_B_4_8[,c(2:7)]
plot(dat, pch=as.numeric(df_B_4_8$name))
# PCA
dat_PCA <- data.frame(Sample = df_B_4_8$Sample, AR = df_B_4_8$Aspect_Ratio, C = df_B_4_8$Circulality, ED = df_B_4_8$Equal_Diameter, S = df_B_4_8$Shortest_Length, L = df_B_4_8$Longest_Length, P = df_B_4_8$Perimeter, A = df_B_4_8$Area)
head(dat_PCA)
pca_model <- prcomp(dat_PCA[,2:8], scale = T)
summary(pca_model)
round(pca_model$loadings[],5)
round(pca_model$loadings[])
round(pca_model$loadings)
pca_model$loadings
# PCA
dat_PCA <- data.frame(Sample = df_B_4_8$Sample, AR = df_B_4_8$Aspect_Ratio, C = df_B_4_8$Circulality, ED = df_B_4_8$Equal_Diameter, S = df_B_4_8$Shortest_Length, L = df_B_4_8$Longest_Length, P = df_B_4_8$Perimeter, A = df_B_4_8$Area)
head(dat_PCA)
pca_model <- prcomp(dat_PCA[,2:8], scale = T)
summary(pca_model)
pca_model$loadings
# plot
par(mfrow = c(1,2))
biplot(pca_model, main="PCA")
# pc1 pc2 axis plot
pca_df <- data.frame(Sample = df_B_4_8$Sample,PC1 = pca_model$x[,1], PC2 = pca_model$x[,2])
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.7, colour = "red")+ geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5)
par(mfrow = c(1,1))
#image_analysis 研究データ処理----
# import dataset
df_B <- read.csv("Weibull_B.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
# 相関
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(CorResult, method="shade", shade.col=NA, tl.col="black", tl.srt=45,
col=col(200), addCoef.col="black", addcolorlabel="no", type = "upper")
# pairplot : linear fit
library(psych)
pairs.panels(dat, lm = TRUE, hist.col = "green")
# PCA分析
dat_PCA <- dat
head(dat_PCA)
row.names(dat_PCA) <- c(101,102,103,201,202,203,301,303,401,403,501,503,601,602,603,701,702,703,801,802,803,901,902,903,1001,1002,1003,1101,1102,1103)
pca_model <- prcomp(dat_PCA, scale = TRUE)
summary(pca_model)$importance
pca_model$rotation
# 主成分負荷量
round(t(t(pca_model$rotation)*pca_model$sdev)[,drop = FALSE],5)
# 主成分負荷量
cor(pca_model$x, dat_PCA)
# 主成分負荷量
round(cor(pca_model$x, dat_PCA))
# 主成分負荷量
round(cor(pca_model$x, dat_PCA), 5)
round(t(t(pca_model$rotation)*pca_model$sdev)[,drop = FALSE],5)
rstudioapi::versionInfo()
version
# 図示
biplot(pca_model, main="PCA")
# GLM (Logistic regression)
df_B <- read.csv("Weibull_B_傾斜_標高.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A", "Elev", "Ang", "Site")
head(df_B)
# Site = b + a1AR + a2C + a3A
df_B_Site.glm<-glm(Site~., data=df_B[, c(2,3,8,11)], family=binomial)
AIC(df_B_Site.glm)
real <- df_B$Site
pred <- fitted(df_B_Site.glm)
pred_round <- round(pred)
result_Site <- data.frame(real, pred_round)
result_Site
summary(df_B_Site.glm)
df_B <- scale(df_B[, c(2,3,8)])
df_B(head)
df_B
data.frame(df_B)
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A", "Elev", "Ang", "Site")
head(df_B)
# GLM (Logistic regression)
df_B <- read.csv("Weibull_B_傾斜_標高.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A", "Elev", "Ang", "Site")
head(df_B)
scale.b <- scale(df_B[, c(2,3,8)])
data.frame(scale.b, df_B[, 11])
data.frame(scale.b, df_B$Site)
df_S <- data.frame(scale.b, df_B[,c(11)])
df_S
names(df_S) <- c("AR", "C", "A", "Site")
df_S
# Site = b + a1AR + a2C + a3A
df_B_Site.glm<-glm(Site~., df_S, family=binomial)
AIC(df_B_Site.glm)
real <- df_B$Site
pred <- fitted(df_B_Site.glm)
pred_round <- round(pred)
result_Site <- data.frame(real, pred_round)
result_Site
summary(df_B_Site.glm)
point <- 0
for (i in 1:30){
if (result_Site$real[i] == result_Site$pred_round[i]){
point <- point + 1
}
else {
point <- point + 0
}
}
point/30
# pairplot : linear fit
library(psych)
pairs.panels(df_B[, c(2:11)], lm = TRUE, hist.col = "green")
# 線形回帰lm
# Site
df_B_Site.lm<-lm(Site~.,data=df_B[, c(2:8,11)])
qqnorm(resid(df_B_Site.lm), pch="o", col="red")
qqline(resid(df_B_Site.lm))
# Elev
df_B_Elev.lm<-lm(Elev~.,data=df_B[, c(2:9)])
qqnorm(resid(df_B_Elev.lm), pch="o", col="red")
qqline(resid(df_B_Elev.lm))
# Ang
df_B_Ang.lm<-lm(Ang~.,data=df_B[, c(2:8,10)])
qqnorm(resid(df_B_Ang.lm), pch="o", col="red")
qqline(resid(df_B_Ang.lm))
# AIC
AIC(df_B_Site.lm)
AIC(df_B_Elev.lm)
AIC(df_B_Ang.lm)
#image_analysis ----
# import dataset
df_B <- read.csv("Weibull_B_Shape.csv")
names(df_B) <- c("Sample", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
# 4~8 mm name: df_B_4_8
nm_4_8 <- c(6047, 6051, 6055, 6058, 6061, 6064, 6068, 6073, 6077, 6081, 6085)
for (i in 1:11){
df_B_4_8[i,] <- df_B[df_B$Sample == nm_4_8[i],]
}
df_B_4_8
summary(df_B_4_8)
df_B_4_8$Sample <- c(1:11)
df_B_4_8
# plot
library(ggplot2)
ggplot(data = df_B_4_8, aes(x=Area, y=Circulality, colour=name)) + geom_point(size=8, alpha=0.4)
# except name
dat <- df_B_4_8[,c(2:7)]
plot(dat, pch=as.numeric(df_B_4_8$name))
# PCA
dat_PCA <- data.frame(Sample = df_B_4_8$Sample, AR = df_B_4_8$Aspect_Ratio, C = df_B_4_8$Circulality, ED = df_B_4_8$Equal_Diameter, S = df_B_4_8$Shortest_Length, L = df_B_4_8$Longest_Length, P = df_B_4_8$Perimeter, A = df_B_4_8$Area)
head(dat_PCA)
pca_model <- prcomp(dat_PCA[,2:8], scale = T)
summary(pca_model)
# plot
par(mfrow = c(1,2))
biplot(pca_model, main="PCA")
# pc1 pc2 axis plot
pca_df <- data.frame(Sample = df_B_4_8$Sample,PC1 = pca_model$x[,1], PC2 = pca_model$x[,2])
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.7, colour = "red")+ geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5)
par(mfrow = c(1,1))
#sampleでグラデーションカラーにしたいとき↓
# Scaling
scale.b <- scale(df_B[, c(2,3,8)])
df_S <- data.frame(scale.b, df_B[,c(11)])
names(df_S) <- c("AR", "C", "A", "Site")
df_S
# Site = b + a1AR + a2C + a3A
df_B_Site.glm<-glm(Site~., df_S, family=binomial)
AIC(df_B_Site.glm)
real <- df_B$Site
pred <- fitted(df_B_Site.glm)
pred_round <- round(pred)
result_Site <- data.frame(real, pred_round)
result_Site
summary(df_B_Site.glm)
# NOT Scaling (Site = b + a1AR + a2C + a3A)
df_B_Site.glm<-glm(Site~., df_B[,c(2,3,8,11)], family=binomial)
AIC(df_B_Site.glm)
# NOT Scaling (Site = b + a1AR + a2C + a3A)
df_B_Site.glm<-glm(Site~., df_B[,c(2,3,8,11)], family=binomial)
df_B[,c(2,3,8,11)]
df_B[,c(2,3,8,10)]
# GLM (Logistic regression)
df_B <- read.csv("Weibull_B_傾斜_標高.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A", "Elev", "Ang", "Site")
head(df_B)
# Scaling (Site = b + a1AR + a2C + a3A)
df_B_Site.glm<-glm(Site~., df_S, family=binomial)
AIC(df_B_Site.glm)
real <- df_B$Site
pred <- fitted(df_B_Site.glm)
pred_round <- round(pred)
result_Site <- data.frame(real, pred_round)
result_Site
summary(df_B_Site.glm)
# GLM (Logistic regression)
df_B <- read.csv("Weibull_B_傾斜_標高.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A", "Elev", "Ang", "Site")
head(df_B)
# Scaling
scale.b <- scale(df_B[, c(2,3,8)])
df_S <- data.frame(scale.b, df_B[,c(11)])
names(df_S) <- c("AR", "C", "A", "Site")
df_S
# Scaling (Site = b + a1AR + a2C + a3A)
df_B_Site.glm<-glm(Site~., df_S, family=binomial)
AIC(df_B_Site.glm)
real <- df_B$Site
pred <- fitted(df_B_Site.glm)
pred_round <- round(pred)
result_Site <- data.frame(real, pred_round)
result_Site
summary(df_B_Site.glm)
# GLM (Logistic regression)
df_B <- read.csv("Weibull_B_傾斜_標高.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A", "Elev", "Ang", "Site")
head(df_B)
# Scaling
scale.b <- scale(df_B[, c(2,3,8)])
# GLM (Logistic regression)
df_B <- read.csv("Weibull_B_傾斜_標高.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A", "Elev", "Ang", "Site")
head(df_B)
# NOT Scaling (Site = b + a1AR + a2C + a3A)
df_B_Site.glm<-glm(Site~., df_B[,c(2,3,8,11)], family=binomial)
AIC(df_B_Site.glm)
real <- df_B$Site
pred <- fitted(df_B_Site.glm)
pred_round <- round(pred)
result_Site <- data.frame(real, pred_round)
result_Site
summary(df_B_Site.glm)
#image_analysis----
#----------------------------<import data>----------------------------#
df_B <- read.csv("Weibull_B.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
#----------------------------<相関>----------------------------#
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(CorResult, method="shade", shade.col=NA, tl.col="black", tl.srt=45,
col=col(200), addCoef.col="black", addcolorlabel="no", type = "upper")
# pairplot : linear fit
library(psych)
pairs.panels(dat, lm = TRUE, hist.col = "green")
#----------------------------<相関>----------------------------#
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(CorResult, method="shade", shade.col=NA, tl.col="black", tl.srt=45,
col=col(100), addCoef.col="black", addcolorlabel="no", type = "upper")
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
col <- colorRampPalette(c("#BB4444", "#EE9988"))
corrplot(CorResult, method="shade", shade.col=NA, tl.col="black", tl.srt=45,
col=col(100), addCoef.col="black", addcolorlabel="no", type = "upper")
# Generate a lighter palette
col <- colorRampPalette(c("#BB4444", "#EE9988"))
corrplot(CorResult, method="shade", shade.col=NA, tl.col="black", tl.srt=45,
col=col(500), addCoef.col="black", addcolorlabel="no", type = "upper")
# pairplot : linear fit
library(psych)
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("#BB4444", "#EE9988"))
corrplot(CorResult, method="shade", shade.col=NA, tl.col="black", tl.srt=45,
col=col(100), addCoef.col="black", addcolorlabel="no", type = "upper")
# pairplot : linear fit
library(psych)
pairs.panels(dat, lm = TRUE, hist.col = "green")
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="black", addcolorlabel="no", type = "upper")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("#EE9988","#BB4444"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="black", addcolorlabel="no", type = "upper")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("#EE1111","#BB4444"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="black", addcolorlabel="no", type = "upper")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("#BB1111","#BB4444"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="black", addcolorlabel="no", type = "upper")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","black"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="black", addcolorlabel="no", type = "upper")
# pairplot : linear fit
library(psych)
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","gray"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","FF00007F"))
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
#image_analysis ----
# import dataset
df_B <- read.csv("Weibull_B_Shape.csv")
names(df_B) <- c("Sample", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
# 4~8 mm name: df_B_4_8
nm_4_8 <- c(6047, 6051, 6055, 6058, 6061, 6064, 6068, 6073, 6077, 6081, 6085)
for (i in 1:11){
df_B_4_8[i,] <- df_B[df_B$Sample == nm_4_8[i],]
}
df_B_4_8
summary(df_B_4_8)
df_B_4_8$Sample <- c(1:11)
df_B_4_8
# plot
library(ggplot2)
ggplot(data = df_B_4_8, aes(x=Area, y=Circulality, colour=name)) + geom_point(size=8, alpha=0.4)
# except name
dat <- df_B_4_8[,c(2:7)]
plot(dat, pch=as.numeric(df_B_4_8$name))
# PCA
dat_PCA <- data.frame(Sample = df_B_4_8$Sample, AR = df_B_4_8$Aspect_Ratio, C = df_B_4_8$Circulality, ED = df_B_4_8$Equal_Diameter, S = df_B_4_8$Shortest_Length, L = df_B_4_8$Longest_Length, P = df_B_4_8$Perimeter, A = df_B_4_8$Area)
head(dat_PCA)
pca_model <- prcomp(dat_PCA[,2:8], scale = T)
summary(pca_model)
# plot
par(mfrow = c(1,2))
biplot(pca_model, main="PCA")
# pc1 pc2 axis plot
pca_df <- data.frame(Sample = df_B_4_8$Sample,PC1 = pca_model$x[,1], PC2 = pca_model$x[,2])
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.7, colour = "red")+ geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5)
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.7, colour = "black")+ geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5)
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "black")+ geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5)
par(mfrow = c(1,1))
#image_analysis----
#----------------------------<import data>----------------------------#
df_B <- read.csv("Weibull_B.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
#----------------------------<相関>----------------------------#
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Black"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
corrplot(CorResult, method="shade", shade.col="gray", tl.col="red", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# pairplot : linear fit
library(psych)
pairs.panels(dat, lm = TRUE, hist.col = "green")
#----------------------------<相関>----------------------------#
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Black"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="red", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Black"))
corrplot(CorResult, method="shade", shade.col="red", tl.col="brack", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="brack", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
#----------------------------<相関>----------------------------#
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="brack", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# pairplot : linear fit
library(psych)
#----------------------------<相関>----------------------------#
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Black"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
#----------------------------<相関>----------------------------#
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# save as eps file
ggsave(file = "fig_6.eps")
#----------------------------<相関>----------------------------#
setEPS()                                             # Set postscript arguments
postscript("fig_6.eps")                           # Start graphics device driver
# Create plot
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# save as eps file
dev.off()                                            # Finish export
#----------------------------<PCA>----------------------------#
# PCA分析
dat_PCA <- dat
head(dat_PCA)
row.names(dat_PCA) <- c(101,102,103,201,202,203,301,303,401,403,501,503,601,602,603,701,702,703,801,802,803,901,902,903,1001,1002,1003,1101,1102,1103)
pca_model <- prcomp(dat_PCA, scale = TRUE)
summary(pca_model)$importance
pca_model$rotation
# 主成分負荷量 : 主成分得点と観測変数との相関係数を表す
round(cor(pca_model$x, dat_PCA), 5)
round(t(t(pca_model$rotation)*pca_model$sdev)[,drop = FALSE],5)
# 図示
biplot(pca_model, main="PCA")
# 第一主成分と第二主成分の散布図
pca_df <- data.frame(name = df_B$name,PC1 = pca_model$x[,1], PC2 = pca_model$x[,2])
ggplot(data = pca_df, aes(x = PC1, y = PC2, colour = name, label=name)) + geom_point(size = 8, alpha = 0.1) + geom_text(aes(PC1, PC2, label = name), size = 5)
par(mfrow = c(1,1))
pca_model$rotation
# プロットしてみる
library(ggplot2)
ggplot(data = df_B, aes(x=A, y=C, colour=name)) + geom_point(size=8, alpha=0.4)
# 第一主成分と第二主成分の散布図
pca_df <- data.frame(name = df_B$name,PC1 = pca_model$x[,1], PC2 = pca_model$x[,2])
ggplot(data = pca_df, aes(x = PC1, y = PC2, colour = name, label=name)) + geom_point(size = 8, alpha = 0.1) + geom_text(aes(PC1, PC2, label = name), size = 5)
par(mfrow = c(1,1))
pca_model$rotation
# プロットしてみる
library(ggplot2)
ggplot(data = df_B, aes(x=A, y=C, colour=name)) + geom_point(size=8, alpha=0.4)
