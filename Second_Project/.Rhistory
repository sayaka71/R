corrplot(CorResult, method="shade", shade.col="gray", tl.col="red", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Black"))
corrplot(CorResult, method="shade", shade.col="red", tl.col="brack", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="brack", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
#----------------------------<相関>----------------------------#
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="brack", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# pairplot : linear fit
library(psych)
#----------------------------<相関>----------------------------#
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Black"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
#----------------------------<相関>----------------------------#
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# save as eps file
ggsave(file = "fig_6.eps")
#----------------------------<相関>----------------------------#
setEPS()                                             # Set postscript arguments
postscript("fig_6.eps")                           # Start graphics device driver
# Create plot
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# save as eps file
dev.off()                                            # Finish export
#----------------------------<PCA>----------------------------#
# PCA分析
dat_PCA <- dat
head(dat_PCA)
row.names(dat_PCA) <- c(101,102,103,201,202,203,301,303,401,403,501,503,601,602,603,701,702,703,801,802,803,901,902,903,1001,1002,1003,1101,1102,1103)
pca_model <- prcomp(dat_PCA, scale = TRUE)
summary(pca_model)$importance
pca_model$rotation
# 主成分負荷量 : 主成分得点と観測変数との相関係数を表す
round(cor(pca_model$x, dat_PCA), 5)
round(t(t(pca_model$rotation)*pca_model$sdev)[,drop = FALSE],5)
# 図示
biplot(pca_model, main="PCA")
# 第一主成分と第二主成分の散布図
pca_df <- data.frame(name = df_B$name,PC1 = pca_model$x[,1], PC2 = pca_model$x[,2])
ggplot(data = pca_df, aes(x = PC1, y = PC2, colour = name, label=name)) + geom_point(size = 8, alpha = 0.1) + geom_text(aes(PC1, PC2, label = name), size = 5)
par(mfrow = c(1,1))
pca_model$rotation
# プロットしてみる
library(ggplot2)
ggplot(data = df_B, aes(x=A, y=C, colour=name)) + geom_point(size=8, alpha=0.4)
# 第一主成分と第二主成分の散布図
pca_df <- data.frame(name = df_B$name,PC1 = pca_model$x[,1], PC2 = pca_model$x[,2])
ggplot(data = pca_df, aes(x = PC1, y = PC2, colour = name, label=name)) + geom_point(size = 8, alpha = 0.1) + geom_text(aes(PC1, PC2, label = name), size = 5)
par(mfrow = c(1,1))
pca_model$rotation
# プロットしてみる
library(ggplot2)
ggplot(data = df_B, aes(x=A, y=C, colour=name)) + geom_point(size=8, alpha=0.4)
#image_analysis ----
# import dataset
df_B <- read.csv("Weibull_B_Shape.csv")
names(df_B) <- c("Sample", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
# 4~8 mm name: df_B_4_8
df_4_8 <- c(6047, 6051, 6055, 6058, 6061, 6064, 6068, 6073, 6077, 6081, 6085)
df_B_4_8 <- df_B[1:11,]
for (i in 1:11){
df_B_4_8[i,] <- df_B[df_B$Sample == df_4_8[i],]
}
df_B_4_8
summary(df_B_4_8)
df_B_4_8$Sample <- c(1:11)
df_B_4_8
# plot
library(ggplot2)
ggplot(data = df_B_4_8, aes(x=A, y=C, colour=sample())) + geom_point(size=8, alpha=0.4)
ggplot(data = df_B_4_8, aes(x=A, y=C, colour=sample())) + geom_point(size=8, alpha=0.4)
# except name
dat <- df_B_4_8[,c(2:7)]
plot(dat, pch=as.numeric(df_B_4_8$name))
# PCA
dat_PCA <- data.frame(Sample = df_B_4_8$Sample, AR = df_B_4_8$Aspect_Ratio, C = df_B_4_8$Circulality, ED = df_B_4_8$Equal_Diameter, S = df_B_4_8$Shortest_Length, L = df_B_4_8$Longest_Length, P = df_B_4_8$Perimeter, A = df_B_4_8$Area)
head(dat_PCA)
pca_model <- prcomp(dat_PCA[,2:8], scale = T)
summary(pca_model)
# plot
par(mfrow = c(1,2))
biplot(pca_model, main="PCA")
# pc1 pc2 axis plot
pca_df <- data.frame(Sample = df_B_4_8$Sample,PC1 = pca_model$x[,1], PC2 = pca_model$x[,2])
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "black")+ geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5)
par(mfrow = c(1,1))
pca_df
# except name
dat <- df_B_4_8[,c(2:7)]
plot(dat, pch=as.numeric(df_B_4_8$name))
head(dat_PCA)
#image_analysis ----
# import dataset
df_B <- read.csv("Weibull_B_Shape.csv")
names(df_B) <- c("Sample", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
# 4~8 mm name: df_B_4_8
df_4_8 <- c(6047, 6051, 6055, 6058, 6061, 6064, 6068, 6073, 6077, 6081, 6085)
df_B_4_8 <- df_B[1:11,]
for (i in 1:11){
df_B_4_8[i,] <- df_B[df_B$Sample == df_4_8[i],]
}
df_B_4_8
summary(df_B_4_8)
df_B_4_8$Sample <- c(1:11)
df_B_4_8
# plot
library(ggplot2)
ggplot(data = df_B_4_8, aes(x=A, y=C, colour=sample())) + geom_point(size=8, alpha=0.4)
# except name
dat <- df_B_4_8[,c(2:7)]
plot(dat, pch=as.numeric(df_B_4_8$name))
# PCA
# dat_PCA <- data.frame(Sample = df_B_4_8$Sample, AR = df_B_4_8$Aspect_Ratio, C = df_B_4_8$Circulality, ED = df_B_4_8$Equal_Diameter, S = df_B_4_8$Shortest_Length, L = df_B_4_8$Longest_Length, P = df_B_4_8$Perimeter, A = df_B_4_8$Area)
# head(dat_PCA)
pca_model <- prcomp(dat_PCA[,2:8], scale = T)
summary(pca_model)
# plot
par(mfrow = c(1,2))
biplot(pca_model, main="PCA")
# pc1 pc2 axis plot
pca_df <- data.frame(Sample = df_B_4_8$Sample,PC1 = pca_model$x[,1], PC2 = pca_model$x[,2])
pca_df
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "black")+ geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5)
par(mfrow = c(1,1))
# PCA
# dat_PCA <- data.frame(Sample = df_B_4_8$Sample, AR = df_B_4_8$Aspect_Ratio, C = df_B_4_8$Circulality, ED = df_B_4_8$Equal_Diameter, S = df_B_4_8$Shortest_Length, L = df_B_4_8$Longest_Length, P = df_B_4_8$Perimeter, A = df_B_4_8$Area)
# head(dat_PCA)
pca_model <- prcomp(df_B_4_8[,2:8], scale = T)
summary(pca_model)
# plot
par(mfrow = c(1,2))
biplot(pca_model, main="PCA")
# pc1 pc2 axis plot
pca_df <- data.frame(Sample = df_B_4_8$Sample,PC1 = pca_model$x[,1], PC2 = pca_model$x[,2])
pca_df
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "black")+ geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5)
par(mfrow = c(1,1))
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red")+ geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5)
+ annotate("text", x=3,   y=48, label="Group 1")
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=3,   y=48, label="Group 1")
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=1,   y=1, label="Group 1")
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-2,   y=1, label="Group 1")
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-2,   y=1, label="Gully bed") +
annotate("text", x=3,   y=48, label="Wall")
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-2,   y=1, label="Gully bed") +
annotate("text", x=2.5,   y=-0.5, label="Wall")
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-2,   y=1, label="Gully bed", size = 5) +
annotate("text", x=2.5,   y=-0.5, label="Wall", size = 5)
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-1.8,   y=0.8, label="Gully bed", size = 5) +
annotate("text", x=2.5,   y=-0.5, label="Wall", size = 5)
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-1.8,   y=0.9, label="Gully bed", size = 5, face = bold) +
annotate("text", x=2.5,   y=-0.5, label="Wall", size = 5)
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-1.8,   y=0.9, label="Gully bed", size = 5, face = 'bold') +
annotate("text", x=2.5,   y=-0.5, label="Wall", size = 5)
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-1.8,   y=0.9, label="Gully bed", size = 8) +
annotate("text", x=2.5,   y=-0.5, label="Wall", size = 8)
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-1.8,   y=0.9, label="Gully bed", size = 7) +
annotate("text", x=2.5,   y=-0.5, label="Wall", size = 7)
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-1.8,   y=0.9, label="Gully bed", size = 6) +
annotate("text", x=2.5,   y=-0.5, label="Wall", size = 6, fontface = 'bold')
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-1.8,   y=0.9, label="Gully bed", size = 6, fontface = 'bold') +
annotate("text", x=2.5,   y=-0.5, label="Wall", size = 6, fontface = 'bold')
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-1.8,   y=0.9, label="Gully bed", size = 6, fontface = 'bold') +
annotate("text", x=2.5,   y=-0.5, label="Wall", size = 6, fontface = 'bold')
lines(x,fitted(fm))
gg <- ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-1.8,   y=0.9, label="Gully bed", size = 6, fontface = 'bold') +
annotate("text", x=2.5,   y=-0.5, label="Wall", size = 6, fontface = 'bold')
lines(x,fitted(gg))
gg
ggsave('fig_4b.eps')
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, alpha = 0.9, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-1.8,   y=0.9, label="Gully bed", size = 6, fontface = 'bold') +
annotate("text", x=2.5,   y=-0.5, label="Wall", size = 6, fontface = 'bold')
ggsave('fig_4b.eps')
ggplot(data = pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 8, colour = "red") +
geom_text(colour = "white", aes(PC1, PC2, label = Sample), size = 5) +
annotate("text", x=-1.8,   y=0.9, label="Gully bed", size = 6, fontface = 'bold') +
annotate("text", x=2.5,   y=-0.5, label="Wall", size = 6, fontface = 'bold')
ggsave('fig_4b.eps')
# PCA
# dat_PCA <- data.frame(Sample = df_B_4_8$Sample, AR = df_B_4_8$Aspect_Ratio, C = df_B_4_8$Circulality, ED = df_B_4_8$Equal_Diameter, S = df_B_4_8$Shortest_Length, L = df_B_4_8$Longest_Length, P = df_B_4_8$Perimeter, A = df_B_4_8$Area)
# head(dat_PCA)
pca_model <- prcomp(df_B_4_8[,2:8], scale = T)
summary(pca_model)
# plot
par(mfrow = c(1,2))
biplot(pca_model, main="PCA")
# PCA
# dat_PCA <- data.frame(Sample = df_B_4_8$Sample, AR = df_B_4_8$Aspect_Ratio, C = df_B_4_8$Circulality, ED = df_B_4_8$Equal_Diameter, S = df_B_4_8$Shortest_Length, L = df_B_4_8$Longest_Length, P = df_B_4_8$Perimeter, A = df_B_4_8$Area)
# head(dat_PCA)
pca_model <- prcomp(df_B_4_8[,2:8], scale = T)
summary(pca_model)
# plot
par(mfrow = c(1,2))
biplot(pca_model, main="PCA")
# pca plot (all)
df_B
df_B$Sample = c(1,30)
df_B
# pca plot (all)
df_B
df_B$Sample = c(1:30)
df_B
pca_model <- prcomp(df_B[,2:8], scale = T)
summary(pca_model)
par(mfrow = c(1,2))
biplot(pca_model, main="PCA")
#----------------------------<PCA>----------------------------#
# PCA分析
dat_PCA <- dat
head(dat_PCA)
row.names(dat_PCA) <- c(101,102,103,201,202,203,301,303,401,403,501,503,601,602,603,701,702,703,801,802,803,901,902,903,1001,1002,1003,1101,1102,1103)
pca_model <- prcomp(dat_PCA, scale = TRUE)
#image_analysis----
#----------------------------<import data>----------------------------#
df_B <- read.csv("Weibull_B.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
#----------------------------<相関>----------------------------#
setEPS()                                             # Set postscript arguments
postscript("fig_6.eps")                           # Start graphics device driver
# Create plot
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# save as eps file
dev.off()                                            # Finish export
# pairplot : linear fit
library(psych)
pairs.panels(dat, lm = TRUE, hist.col = "green")
#----------------------------<PCA>----------------------------#
# PCA分析
dat_PCA <- dat
head(dat_PCA)
row.names(dat_PCA) <- c(101,102,103,201,202,203,301,303,401,403,501,503,601,602,603,701,702,703,801,802,803,901,902,903,1001,1002,1003,1101,1102,1103)
pca_model <- prcomp(dat_PCA, scale = TRUE)
summary(pca_model)$importance
pca_model$rotation
# 主成分負荷量 : 主成分得点と観測変数との相関係数を表す
round(cor(pca_model$x, dat_PCA), 5)
round(t(t(pca_model$rotation)*pca_model$sdev)[,drop = FALSE],5)
# 図示
biplot(pca_model, main="PCA")
#----------------------------<PCA>----------------------------#
# PCA分析
dat_PCA <- dat
head(dat_PCA)
# row.names(dat_PCA) <- c(101,102,103,201,202,203,301,303,401,403,501,503,601,602,603,701,702,703,801,802,803,901,902,903,1001,1002,1003,1101,1102,1103)
# row.names(dat_PCA) <- c(1:30)
pca_model <- prcomp(dat_PCA, scale = TRUE)
summary(pca_model)$importance
pca_model$rotation
# 主成分負荷量 : 主成分得点と観測変数との相関係数を表す
round(cor(pca_model$x, dat_PCA), 5)
round(t(t(pca_model$rotation)*pca_model$sdev)[,drop = FALSE],5)
# 図示
biplot(pca_model, main="PCA")
#----------------------------<PCA>----------------------------#
# PCA分析
dat_PCA <- dat
head(dat_PCA)
# row.names(dat_PCA) <- c(101,102,103,201,202,203,301,303,401,403,501,503,601,602,603,701,702,703,801,802,803,901,902,903,1001,1002,1003,1101,1102,1103)
# row.names(dat_PCA) <- c(1:30)
pca_model <- prcomp(dat_PCA, scale = TRUE)
summary(pca_model)$importance
pca_model$rotation
# 主成分負荷量 : 主成分得点と観測変数との相関係数を表す
round(cor(pca_model$x, dat_PCA), 5)
round(t(t(pca_model$rotation)*pca_model$sdev)[,drop = FALSE],5)
# 図示
biplot(pca_model, main="PCA")
#----------------------------<PCA>----------------------------#
# PCA分析
dat_PCA <- dat
head(dat_PCA)
# row.names(dat_PCA) <- c(101,102,103,201,202,203,301,303,401,403,501,503,601,602,603,701,702,703,801,802,803,901,902,903,1001,1002,1003,1101,1102,1103)
# row.names(dat_PCA) <- c(1:30)
pca_model <- prcomp(dat_PCA, scale = TRUE)
summary(pca_model)$importance
pca_model$rotation
# 主成分負荷量 : 主成分得点と観測変数との相関係数を表す
round(cor(pca_model$x, dat_PCA), 5)
round(t(t(pca_model$rotation)*pca_model$sdev)[,drop = FALSE],5)
setEPS()                                             # Set postscript arguments
postscript("fig_6.eps")                           # Start graphics device driver
# Create plot
# 図示
biplot(pca_model, main="PCA")
# save as eps file
dev.off()
#image_analysis----
#----------------------------<import data>----------------------------#
df_B <- read.csv("Weibull_B.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
#----------------------------<相関>----------------------------#
setEPS()                                             # Set postscript arguments
postscript("fig_6.eps")                           # Start graphics device driver
# Create plot
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
#image_analysis----
#----------------------------<import data>----------------------------#
df_B <- read.csv("Weibull_B.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
#----------------------------<相関>----------------------------#
setEPS()                                             # Set postscript arguments
postscript("fig_6.eps")                           # Start graphics device driver
# Create plot
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# save as eps file
dev.off()                                            # Finish export
# pairplot : linear fit
library(psych)
pairs.panels(dat, lm = TRUE, hist.col = "green")
#----------------------------<PCA>----------------------------#
setEPS()                                             # Set postscript arguments
postscript("fig_4a.eps")                           # Start graphics device driver
# Create plot
# PCA分析
dat_PCA <- dat
head(dat_PCA)
# row.names(dat_PCA) <- c(101,102,103,201,202,203,301,303,401,403,501,503,601,602,603,701,702,703,801,802,803,901,902,903,1001,1002,1003,1101,1102,1103)
# row.names(dat_PCA) <- c(1:30)
pca_model <- prcomp(dat_PCA, scale = TRUE)
summary(pca_model)$importance
pca_model$rotation
# 主成分負荷量 : 主成分得点と観測変数との相関係数を表す
round(cor(pca_model$x, dat_PCA), 5)
round(t(t(pca_model$rotation)*pca_model$sdev)[,drop = FALSE],5)
# 図示
biplot(pca_model, main="PCA")
# save as eps file
dev.off()
#image_analysis----
#----------------------------<import data>----------------------------#
df_B <- read.csv("Weibull_B.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
#----------------------------<相関>----------------------------#
setEPS()                                             # Set postscript arguments
postscript("fig_6.eps")                           # Start graphics device driver
# Create plot
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("Blue","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# save as eps file
dev.off()                                            # Finish export
#----------------------------<相関>----------------------------#
setEPS()                                             # Set postscript arguments
postscript("fig_6.eps")                           # Start graphics device driver
# Create plot
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# save as eps file
dev.off()                                            # Finish export
#image_analysis----
#----------------------------<import data>----------------------------#
df_B <- read.csv("Weibull_B.csv")
names(df_B) <- c("name", "AR", "C", "ED", "S", "L", "P", "A")
head(df_B)
#----------------------------<相関>----------------------------#
setEPS()                                             # Set postscript arguments
postscript("fig_6.eps")                           # Start graphics device driver
# Create plot
library(corrplot)
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("#4477AA", "#77AADD", "#FFFFFF", "#EE9988", "#BB4444"))
# col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", addcolorlabel="no", type = "upper")
# col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", type = "upper")
# Create plot
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("#4477AA", "#77AADD", "#FFFFFF", "#EE9988", "#BB4444"))
# col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", type = "upper")
#----------------------------<相関>----------------------------#
setEPS()                                             # Set postscript arguments
postscript("fig_6.eps")                           # Start graphics device driver
# Create plot
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("#4477AA", "#77AADD", "#FFFFFF", "#EE9988", "#BB4444"))
# col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="white", type = "upper")
# save as eps file
dev.off()                                            # Finish export
#----------------------------<相関>----------------------------#
setEPS()                                             # Set postscript arguments
postscript("fig_6.eps")                           # Start graphics device driver
# Create plot
library(corrplot)
dat <- df_B[,c(2:8)]
CorResult <- cor(dat, method = "pearson")
# Generate a lighter palette
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
col <- colorRampPalette(c("#4477AA", "#77AADD", "#FFFFFF", "#EE9988", "#BB4444"))
# col <- colorRampPalette(c("white","Red"))
corrplot(CorResult, method="shade", shade.col="gray", tl.col="black", tl.srt=45,
col=col(100), addCoef.col="black", type = "upper")
# save as eps file
dev.off()                                            # Finish export
